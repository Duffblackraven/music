"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/signin/page",{

/***/ "(app-pages-browser)/./src/api/api.tsx":
/*!*************************!*\
  !*** ./src/api/api.tsx ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addTrackToPlaylist: function() { return /* binding */ addTrackToPlaylist; },\n/* harmony export */   getLikedTracks: function() { return /* binding */ getLikedTracks; },\n/* harmony export */   getToken: function() { return /* binding */ getToken; },\n/* harmony export */   getTracks: function() { return /* binding */ getTracks; },\n/* harmony export */   login: function() { return /* binding */ login; },\n/* harmony export */   refreshToken: function() { return /* binding */ refreshToken; },\n/* harmony export */   register: function() { return /* binding */ register; },\n/* harmony export */   removeTrackFromPlaylist: function() { return /* binding */ removeTrackFromPlaylist; }\n/* harmony export */ });\nconst API_URL = \"https://skypro-music-api.skyeng.tech/catalog/\";\nconst TRACK = \"track/\";\nconst ALL = \"all/\";\nconst FAVORITE = \"favorite/\";\nconst SELECTION = \"selection/\";\nconst API_URL_USER = \"https://skypro-music-api.skyeng.tech/user/\";\nconst LOGIN = \"login/\";\nconst SIGNUP = \"signup/\";\nconst TOKEN = \"token/\";\nconst TOKEN_REFRESH = \"token/refresh/\";\nasync function getTracks(playlistID) {\n    try {\n        const response = await fetch(API_URL + (playlistID ? SELECTION + playlistID : TRACK + ALL));\n        if (!response.ok) {\n            if (response.status === 401) {\n                throw new Error(\"Нет авторизации\");\n            } else {\n                throw new Error(\"Ошибка! Статус: \".concat(response.status));\n            }\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.warn(error);\n        throw error;\n    }\n}\nasync function getLikedTracks(userToken) {\n    return fetch(API_URL + TRACK + FAVORITE + ALL, {\n        method: \"GET\",\n        headers: {\n            Authorization: \"Bearer \".concat(userToken)\n        }\n    }).then((response)=>{\n        if (response.status === 400) {\n            throw new Error(\"Неверный адрес электронной почты или пароль.\");\n        }\n        if (response.status === 401) {\n            throw new Error(\"Пользователь не найден\");\n        }\n        if (response.status === 500) {\n            throw new Error(\"Ошибка на сервере.\");\n        }\n        return response.json();\n    });\n}\nasync function login(param) {\n    let { email, password } = param;\n    return fetch(API_URL_USER + LOGIN, {\n        method: \"POST\",\n        body: JSON.stringify({\n            email,\n            password\n        }),\n        headers: {\n            \"content-type\": \"application/json\"\n        }\n    }).then((response)=>{\n        if (response.status === 400) {\n            throw new Error(\"Неверный адрес электронной почты или пароль.\");\n        }\n        if (response.status === 401) {\n            throw new Error(\"Пользователь не найден\");\n        }\n        if (response.status === 500) {\n            throw new Error(\"Ошибка на сервере.\");\n        }\n        return response.json();\n    });\n}\nasync function register(param) {\n    let { username, email, password } = param;\n    return fetch(API_URL_USER + SIGNUP, {\n        method: \"POST\",\n        body: JSON.stringify({\n            email,\n            password,\n            username\n        }),\n        headers: {\n            \"content-type\": \"application/json\"\n        }\n    }).then((response)=>{\n        if (response.status === 400) {\n            throw new Error(\"Ошибка при регистрации.\");\n        }\n        return response.json();\n    });\n}\nasync function getToken(param) {\n    let { email, password } = param;\n    return fetch(API_URL_USER + TOKEN, {\n        method: \"POST\",\n        body: JSON.stringify({\n            email,\n            password\n        }),\n        headers: {\n            \"content-type\": \"application/json\"\n        }\n    }).then((response)=>{\n        if (response.status === 400) {\n            throw new Error(\"Неверный адрес электронной почты или пароль.\");\n        }\n        if (response.status === 401) {\n            throw new Error(\"Пользователь не найден\");\n        }\n        if (response.status === 500) {\n            throw new Error(\"Ошибка на сервере.\");\n        }\n        return response.json();\n    });\n}\nasync function refreshToken(refresh) {\n    return fetch(API_URL_USER + TOKEN_REFRESH, {\n        method: \"POST\",\n        body: JSON.stringify({\n            refresh: refresh\n        }),\n        headers: {\n            \"content-type\": \"application/json\"\n        }\n    }).then((response)=>{\n        if (response.status === 400) {\n            throw new Error(\"Одна ошибка и ты ошибся\");\n        }\n        if (response.status === 401) {\n            throw new Error(\"Ошибка при получении токена.\");\n        }\n        if (response.status === 500) {\n            throw new Error(\"Ошибка на сервере.\");\n        }\n        return response.json();\n    });\n}\nasync function addTrackToPlaylist(trackId) {\n    return fetch(API_URL + TRACK + \"\".concat(trackId, \"/\") + FAVORITE, {\n        method: \"POST\",\n        body: JSON.stringify({\n            trackId\n        }),\n        headers: {\n            Authorization: \"Bearer \".concat(localStorage.getItem(\"userToken\"))\n        }\n    }).then((response)=>{\n        if (response.status === 400) {\n            throw new Error(\"Ошибка добавления трека.\");\n        }\n        if (response.status === 401) {\n            throw new Error(\"Ошибка при получении токена.\");\n        }\n        return response.json();\n    });\n}\nasync function removeTrackFromPlaylist(trackId) {\n    return fetch(API_URL + TRACK + \"\".concat(trackId, \"/\") + FAVORITE, {\n        method: \"DELETE\",\n        body: JSON.stringify({\n            id: trackId\n        }),\n        headers: {\n            \"content-type\": \"application/json\",\n            Authorization: \"Bearer \".concat(localStorage.getItem(\"userToken\"))\n        }\n    }).then((response)=>{\n        if (response.status === 400) {\n            throw new Error(\"Ошибка удаления трека.\");\n        }\n        if (response.status === 401) {\n            throw new Error(\"Ошибка при получении токена.\");\n        }\n        return response.json();\n    });\n}\n // const API_URL = \"https://skypro-music-api.skyeng.tech/catalog/\";\n // const TRACK = \"track/\";\n // const ALL = \"all/\";\n // const FAVORITE = \"favorite/\";\n // const SELECTION = \"selection/\";\n // const API_URL_USER = \"https://skypro-music-api.skyeng.tech/user/\";\n // const LOGIN = \"login/\";\n // const SIGNUP = \"signup/\";\n // const TOKEN = \"token/\";\n // const TOKEN_REFRESH = \"token/refresh/\";\n // export async function getTracks(playlistID: number | null) {\n //     try {\n //         const response = await fetch(API_URL + (playlistID ? (SELECTION + playlistID) : (TRACK + ALL)));\n //         if (!response.ok) {\n //             if (response.status === 401) {\n //                 throw new Error(\"Нет авторизации\");\n //             } else {\n //                 throw new Error(`Ошибка! Статус: ${response.status}`);\n //             };\n //         };\n //         const data = await response.json();\n //         return data;\n //     } catch (error) {\n //         console.warn(error);\n //         throw error;\n //     };\n // };\n // export async function getLikedTracks(userToken: string) {\n //     return fetch(API_URL + TRACK + FAVORITE + ALL, {\n //         method: \"GET\",\n //         headers: {\n //             Authorization: `Bearer ${userToken}`,\n //         },\n //     }).then((response) => {\n //         if (response.status === 400) {\n //             throw new Error(\"Неверный адрес электронной почты или пароль.\");\n //         };\n //         if (response.status === 401) {\n //             throw new Error(\"Пользователь не найден.\");\n //         };\n //         if (response.status === 500) {\n //             throw new Error(\"Ошибка на сервере.\");\n //         };\n //         return response.json();\n //     });\n // };\n // type loginProps = {\n //     email: string;\n //     password: string;\n // };\n // export async function login({ email, password }: loginProps) {\n //     return fetch(API_URL_USER + LOGIN, {\n //         method: \"POST\",\n //         body: JSON.stringify({\n //             email,\n //             password,\n //         }),\n //         headers: {\n //             \"content-type\": \"application/json\",\n //         },\n //     }).then((response) => {\n //         if (response.status === 400) {\n //             throw new Error(\"Неверный адрес электронной почты или пароль.\");\n //         };\n //         if (response.status === 401) {\n //             throw new Error(\"Пользователь не найден.\");\n //         };\n //         if (response.status === 500) {\n //             throw new Error(\"Ошибка на сервере.\");\n //         };\n //         return response.json();\n //     });\n // };\n // type registerProps = {\n //     username: string\n //     email: string;\n //     password: string;\n // };\n // export async function register({ username, email, password }: registerProps) {\n //     return fetch(API_URL_USER + SIGNUP, {\n //         method: \"POST\",\n //         body: JSON.stringify({\n //             email,\n //             password,\n //             username,\n //         }),\n //         headers: {\n //             \"content-type\": \"application/json\",\n //         },\n //     }).then((response) => {\n //         if (response.status === 400) {\n //             throw new Error(\"Ошибка при регистрации.\");\n //         };\n //         return response.json();\n //     });\n // };\n // type getTokenProps = {\n //     email: string;\n //     password: string;\n // };\n // export async function getToken({ email, password }: getTokenProps) {\n //     return fetch(API_URL_USER + TOKEN, {\n //         method: \"POST\",\n //         body: JSON.stringify({\n //             email,\n //             password,\n //         }),\n //         headers: {\n //             \"content-type\": \"application/json\",\n //         },\n //     }).then((response) => {\n //         if (response.status === 400) {\n //             throw new Error(\"Неверный адрес электронной почты или пароль.\");\n //         };\n //         if (response.status === 401) {\n //             throw new Error(\"Пользователь не найден.\");\n //         };\n //         if (response.status === 500) {\n //             throw new Error(\"Ошибка на сервере.\");\n //         };\n //         return response.json();\n //     });\n // };\n // export async function refreshToken(refresh: string) {\n //     return fetch(API_URL_USER + TOKEN, {\n //         method: \"POST\",\n //         body: JSON.stringify({\n //             refresh: refresh,\n //         }),\n //         headers: {\n //             \"content-type\": \"application/json\",\n //         },\n //     }).then((response) => {\n //         if (response.status === 400) {\n //             throw new Error(\"Ошибка.\");\n //         };\n //         if (response.status === 401) {\n //             throw new Error(\"Ошибка при получении токена.\");\n //         };\n //         if (response.status === 500) {\n //             throw new Error(\"Ошибка на сервере.\");\n //         };\n //         return response.json();\n //     });\n // };\n // export async function addTrackToPlaylist(trackId: number) {\n //     return fetch(API_URL + TRACK + `${trackId}/` + FAVORITE, {\n //         method: \"POST\",\n //         body: JSON.stringify({\n //             trackId,\n //         }),\n //         headers: {\n //             Authorization: `Bearer ${localStorage.getItem(\"userToken\")}`,\n //         },\n //     }).then((response) => {\n //         if (response.status === 400) {\n //             throw new Error(\"Ошибка добавления трека.\");\n //         };\n //         if (response.status === 401) {\n //             throw new Error(\"Ошибка при получении токена.\");\n //         };\n //         return response.json();\n //     });\n // };\n // export async function removeTrackFromPlaylist(trackId: number) {\n //     return fetch(API_URL + TRACK + `${trackId}/` + FAVORITE, {\n //         method: \"DELETE\",\n //         body: JSON.stringify({\n //             id: trackId,\n //         }),\n //         headers: {\n //             \"content-type\": \"application/json\",\n //             Authorization: `Bearer ${localStorage.getItem(\"userToken\")}`,\n //         },\n //     }).then((response) => {\n //         if (response.status === 400) {\n //             throw new Error(\"Ошибка удаления трека.\");\n //         };\n //         if (response.status === 401) {\n //             throw new Error(\"Ошибка при получении токена.\");\n //         };\n //         return response.json();\n //     });\n // };\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YTtDQUNiLDhCQUE4QjtDQUM5Qix5Q0FBeUM7Q0FDekMseURBQXlEO0NBQ3pELGFBQWE7Q0FDYix5Q0FBeUM7Q0FDekMsK0RBQStEO0NBQy9ELGFBQWE7Q0FDYixrQ0FBa0M7Q0FDbEMsVUFBVTtDQUNWLEtBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2FwaS9hcGkudHN4PzA4ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQVBJX1VSTCA9IFwiaHR0cHM6Ly9za3lwcm8tbXVzaWMtYXBpLnNreWVuZy50ZWNoL2NhdGFsb2cvXCI7XHJcbmNvbnN0IFRSQUNLID0gXCJ0cmFjay9cIjtcclxuY29uc3QgQUxMID0gXCJhbGwvXCI7XHJcbmNvbnN0IEZBVk9SSVRFID0gXCJmYXZvcml0ZS9cIjtcclxuY29uc3QgU0VMRUNUSU9OID0gXCJzZWxlY3Rpb24vXCI7XHJcbmNvbnN0IEFQSV9VUkxfVVNFUiA9IFwiaHR0cHM6Ly9za3lwcm8tbXVzaWMtYXBpLnNreWVuZy50ZWNoL3VzZXIvXCI7XHJcbmNvbnN0IExPR0lOID0gXCJsb2dpbi9cIjtcclxuY29uc3QgU0lHTlVQID0gXCJzaWdudXAvXCI7XHJcbmNvbnN0IFRPS0VOID0gXCJ0b2tlbi9cIjtcclxuY29uc3QgVE9LRU5fUkVGUkVTSCA9IFwidG9rZW4vcmVmcmVzaC9cIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRUcmFja3MocGxheWxpc3RJRDogbnVtYmVyIHwgbnVsbCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKEFQSV9VUkwgKyAocGxheWxpc3RJRCA/IChTRUxFQ1RJT04gKyBwbGF5bGlzdElEKSA6IChUUkFDSyArIEFMTCkpKTtcclxuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi0J3QtdGCINCw0LLRgtC+0YDQuNC30LDRhtC40LhcIik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYNCe0YjQuNCx0LrQsCEg0KHRgtCw0YLRg9GBOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihlcnJvcik7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldExpa2VkVHJhY2tzKHVzZXJUb2tlbjogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goQVBJX1VSTCArIFRSQUNLICsgRkFWT1JJVEUgKyBBTEwsIHtcclxuICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dXNlclRva2VufWAsXHJcbiAgICAgICAgfSxcclxuICAgIH0pLnRoZW4oKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcItCd0LXQstC10YDQvdGL0Lkg0LDQtNGA0LXRgSDRjdC70LXQutGC0YDQvtC90L3QvtC5INC/0L7Rh9GC0Ysg0LjQu9C4INC/0LDRgNC+0LvRjC5cIik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GMINC90LUg0L3QsNC50LTQtdC9XCIpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNTAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcItCe0YjQuNCx0LrQsCDQvdCwINGB0LXRgNCy0LXRgNC1LlwiKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcbnR5cGUgbG9naW5Qcm9wcyA9IHtcclxuICAgIGVtYWlsOiBzdHJpbmc7XHJcbiAgICBwYXNzd29yZDogc3RyaW5nO1xyXG59O1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9naW4oeyBlbWFpbCwgcGFzc3dvcmQgfTogbG9naW5Qcm9wcykge1xyXG4gICAgcmV0dXJuIGZldGNoKEFQSV9VUkxfVVNFUiArIExPR0lOLCB7XHJcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgIGVtYWlsLFxyXG4gICAgICAgICAgICBwYXNzd29yZCxcclxuICAgICAgICB9KSxcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgIH0sXHJcbiAgICB9KS50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLQndC10LLQtdGA0L3Ri9C5INCw0LTRgNC10YEg0Y3Qu9C10LrRgtGA0L7QvdC90L7QuSDQv9C+0YfRgtGLINC40LvQuCDQv9Cw0YDQvtC70YwuXCIpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcItCf0L7Qu9GM0LfQvtCy0LDRgtC10LvRjCDQvdC1INC90LDQudC00LXQvVwiKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDUwMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLQntGI0LjQsdC60LAg0L3QsCDRgdC10YDQstC10YDQtS5cIik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG50eXBlIHJlZ2lzdGVyUHJvcHMgPSB7XHJcbiAgICB1c2VybmFtZTogc3RyaW5nXHJcbiAgICBlbWFpbDogc3RyaW5nO1xyXG4gICAgcGFzc3dvcmQ6IHN0cmluZztcclxufTtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlZ2lzdGVyKHsgdXNlcm5hbWUsIGVtYWlsLCBwYXNzd29yZCB9OiByZWdpc3RlclByb3BzKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goQVBJX1VSTF9VU0VSICsgU0lHTlVQLCB7XHJcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgIGVtYWlsLFxyXG4gICAgICAgICAgICBwYXNzd29yZCxcclxuICAgICAgICAgICAgdXNlcm5hbWUsXHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICB9LFxyXG4gICAgfSkudGhlbigocmVzcG9uc2UpID0+IHtcclxuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi0J7RiNC40LHQutCwINC/0YDQuCDRgNC10LPQuNGB0YLRgNCw0YbQuNC4LlwiKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcbnR5cGUgZ2V0VG9rZW5Qcm9wcyA9IHtcclxuICAgIGVtYWlsOiBzdHJpbmc7XHJcbiAgICBwYXNzd29yZDogc3RyaW5nO1xyXG59O1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VG9rZW4oeyBlbWFpbCwgcGFzc3dvcmQgfTogZ2V0VG9rZW5Qcm9wcykge1xyXG4gICAgcmV0dXJuIGZldGNoKEFQSV9VUkxfVVNFUiArIFRPS0VOLCB7XHJcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgIGVtYWlsLFxyXG4gICAgICAgICAgICBwYXNzd29yZCxcclxuICAgICAgICB9KSxcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgIH0sXHJcbiAgICB9KS50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLQndC10LLQtdGA0L3Ri9C5INCw0LTRgNC10YEg0Y3Qu9C10LrRgtGA0L7QvdC90L7QuSDQv9C+0YfRgtGLINC40LvQuCDQv9Cw0YDQvtC70YwuXCIpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcItCf0L7Qu9GM0LfQvtCy0LDRgtC10LvRjCDQvdC1INC90LDQudC00LXQvVwiKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDUwMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLQntGI0LjQsdC60LAg0L3QsCDRgdC10YDQstC10YDQtS5cIik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVmcmVzaFRva2VuKHJlZnJlc2g6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIGZldGNoKEFQSV9VUkxfVVNFUiArIFRPS0VOX1JFRlJFU0gsIHtcclxuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgcmVmcmVzaDogcmVmcmVzaCxcclxuICAgICAgICB9KSxcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgIH0sXHJcbiAgICB9KS50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLQntC00L3QsCDQvtGI0LjQsdC60LAg0Lgg0YLRiyDQvtGI0LjQsdGB0Y9cIik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi0J7RiNC40LHQutCwINC/0YDQuCDQv9C+0LvRg9GH0LXQvdC40Lgg0YLQvtC60LXQvdCwLlwiKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDUwMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLQntGI0LjQsdC60LAg0L3QsCDRgdC10YDQstC10YDQtS5cIik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkVHJhY2tUb1BsYXlsaXN0KHRyYWNrSWQ6IG51bWJlcikge1xyXG4gICAgcmV0dXJuIGZldGNoKEFQSV9VUkwgKyBUUkFDSyArIGAke3RyYWNrSWR9L2AgKyBGQVZPUklURSwge1xyXG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICB0cmFja0lkLFxyXG4gICAgICAgIH0pLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke2xvY2FsU3RvcmFnZS5nZXRJdGVtKFwidXNlclRva2VuXCIpfWAsXHJcbiAgICAgICAgfSxcclxuICAgIH0pLnRoZW4oKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcItCe0YjQuNCx0LrQsCDQtNC+0LHQsNCy0LvQtdC90LjRjyDRgtGA0LXQutCwLlwiKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLQntGI0LjQsdC60LAg0L/RgNC4INC/0L7Qu9GD0YfQtdC90LjQuCDRgtC+0LrQtdC90LAuXCIpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlbW92ZVRyYWNrRnJvbVBsYXlsaXN0KHRyYWNrSWQ6IG51bWJlcikge1xyXG4gICAgcmV0dXJuIGZldGNoKEFQSV9VUkwgKyBUUkFDSyArIGAke3RyYWNrSWR9L2AgKyBGQVZPUklURSwge1xyXG4gICAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgIGlkOiB0cmFja0lkLFxyXG4gICAgICAgIH0pLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHtsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInVzZXJUb2tlblwiKX1gLFxyXG4gICAgICAgIH0sXHJcbiAgICB9KS50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLQntGI0LjQsdC60LAg0YPQtNCw0LvQtdC90LjRjyDRgtGA0LXQutCwLlwiKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLQntGI0LjQsdC60LAg0L/RgNC4INC/0L7Qu9GD0YfQtdC90LjQuCDRgtC+0LrQtdC90LAuXCIpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxuICAgIH0pO1xyXG59O1xyXG4vLyBjb25zdCBBUElfVVJMID0gXCJodHRwczovL3NreXByby1tdXNpYy1hcGkuc2t5ZW5nLnRlY2gvY2F0YWxvZy9cIjtcclxuLy8gY29uc3QgVFJBQ0sgPSBcInRyYWNrL1wiO1xyXG4vLyBjb25zdCBBTEwgPSBcImFsbC9cIjtcclxuLy8gY29uc3QgRkFWT1JJVEUgPSBcImZhdm9yaXRlL1wiO1xyXG4vLyBjb25zdCBTRUxFQ1RJT04gPSBcInNlbGVjdGlvbi9cIjtcclxuLy8gY29uc3QgQVBJX1VSTF9VU0VSID0gXCJodHRwczovL3NreXByby1tdXNpYy1hcGkuc2t5ZW5nLnRlY2gvdXNlci9cIjtcclxuLy8gY29uc3QgTE9HSU4gPSBcImxvZ2luL1wiO1xyXG4vLyBjb25zdCBTSUdOVVAgPSBcInNpZ251cC9cIjtcclxuLy8gY29uc3QgVE9LRU4gPSBcInRva2VuL1wiO1xyXG4vLyBjb25zdCBUT0tFTl9SRUZSRVNIID0gXCJ0b2tlbi9yZWZyZXNoL1wiO1xyXG5cclxuLy8gZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFRyYWNrcyhwbGF5bGlzdElEOiBudW1iZXIgfCBudWxsKSB7XHJcbi8vICAgICB0cnkge1xyXG4vLyAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goQVBJX1VSTCArIChwbGF5bGlzdElEID8gKFNFTEVDVElPTiArIHBsYXlsaXN0SUQpIDogKFRSQUNLICsgQUxMKSkpO1xyXG4vLyAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuLy8gICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XHJcbi8vICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLQndC10YIg0LDQstGC0L7RgNC40LfQsNGG0LjQuFwiKTtcclxuLy8gICAgICAgICAgICAgfSBlbHNlIHtcclxuLy8gICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihg0J7RiNC40LHQutCwISDQodGC0LDRgtGD0YE6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xyXG4vLyAgICAgICAgICAgICB9O1xyXG4vLyAgICAgICAgIH07XHJcbi8vICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuLy8gICAgICAgICByZXR1cm4gZGF0YTtcclxuLy8gICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbi8vICAgICAgICAgY29uc29sZS53YXJuKGVycm9yKTtcclxuLy8gICAgICAgICB0aHJvdyBlcnJvcjtcclxuLy8gICAgIH07XHJcbi8vIH07XHJcblxyXG4vLyBleHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TGlrZWRUcmFja3ModXNlclRva2VuOiBzdHJpbmcpIHtcclxuLy8gICAgIHJldHVybiBmZXRjaChBUElfVVJMICsgVFJBQ0sgKyBGQVZPUklURSArIEFMTCwge1xyXG4vLyAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuLy8gICAgICAgICBoZWFkZXJzOiB7XHJcbi8vICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt1c2VyVG9rZW59YCxcclxuLy8gICAgICAgICB9LFxyXG4vLyAgICAgfSkudGhlbigocmVzcG9uc2UpID0+IHtcclxuLy8gICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDApIHtcclxuLy8gICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi0J3QtdCy0LXRgNC90YvQuSDQsNC00YDQtdGBINGN0LvQtdC60YLRgNC+0L3QvdC+0Lkg0L/QvtGH0YLRiyDQuNC70Lgg0L/QsNGA0L7Qu9GMLlwiKTtcclxuLy8gICAgICAgICB9O1xyXG4vLyAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xyXG4vLyAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLQn9C+0LvRjNC30L7QstCw0YLQtdC70Ywg0L3QtSDQvdCw0LnQtNC10L0uXCIpO1xyXG4vLyAgICAgICAgIH07XHJcbi8vICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNTAwKSB7XHJcbi8vICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcItCe0YjQuNCx0LrQsCDQvdCwINGB0LXRgNCy0LXRgNC1LlwiKTtcclxuLy8gICAgICAgICB9O1xyXG4vLyAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbi8vICAgICB9KTtcclxuLy8gfTtcclxuXHJcbi8vIHR5cGUgbG9naW5Qcm9wcyA9IHtcclxuLy8gICAgIGVtYWlsOiBzdHJpbmc7XHJcbi8vICAgICBwYXNzd29yZDogc3RyaW5nO1xyXG4vLyB9O1xyXG5cclxuLy8gZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvZ2luKHsgZW1haWwsIHBhc3N3b3JkIH06IGxvZ2luUHJvcHMpIHtcclxuLy8gICAgIHJldHVybiBmZXRjaChBUElfVVJMX1VTRVIgKyBMT0dJTiwge1xyXG4vLyAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbi8vICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4vLyAgICAgICAgICAgICBlbWFpbCxcclxuLy8gICAgICAgICAgICAgcGFzc3dvcmQsXHJcbi8vICAgICAgICAgfSksXHJcbi8vICAgICAgICAgaGVhZGVyczoge1xyXG4vLyAgICAgICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuLy8gICAgICAgICB9LFxyXG4vLyAgICAgfSkudGhlbigocmVzcG9uc2UpID0+IHtcclxuLy8gICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDApIHtcclxuLy8gICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi0J3QtdCy0LXRgNC90YvQuSDQsNC00YDQtdGBINGN0LvQtdC60YLRgNC+0L3QvdC+0Lkg0L/QvtGH0YLRiyDQuNC70Lgg0L/QsNGA0L7Qu9GMLlwiKTtcclxuLy8gICAgICAgICB9O1xyXG4vLyAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xyXG4vLyAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLQn9C+0LvRjNC30L7QstCw0YLQtdC70Ywg0L3QtSDQvdCw0LnQtNC10L0uXCIpO1xyXG4vLyAgICAgICAgIH07XHJcbi8vICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNTAwKSB7XHJcbi8vICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcItCe0YjQuNCx0LrQsCDQvdCwINGB0LXRgNCy0LXRgNC1LlwiKTtcclxuLy8gICAgICAgICB9O1xyXG4vLyAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbi8vICAgICB9KTtcclxuLy8gfTtcclxuXHJcbi8vIHR5cGUgcmVnaXN0ZXJQcm9wcyA9IHtcclxuLy8gICAgIHVzZXJuYW1lOiBzdHJpbmdcclxuLy8gICAgIGVtYWlsOiBzdHJpbmc7XHJcbi8vICAgICBwYXNzd29yZDogc3RyaW5nO1xyXG4vLyB9O1xyXG5cclxuLy8gZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlZ2lzdGVyKHsgdXNlcm5hbWUsIGVtYWlsLCBwYXNzd29yZCB9OiByZWdpc3RlclByb3BzKSB7XHJcbi8vICAgICByZXR1cm4gZmV0Y2goQVBJX1VSTF9VU0VSICsgU0lHTlVQLCB7XHJcbi8vICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuLy8gICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbi8vICAgICAgICAgICAgIGVtYWlsLFxyXG4vLyAgICAgICAgICAgICBwYXNzd29yZCxcclxuLy8gICAgICAgICAgICAgdXNlcm5hbWUsXHJcbi8vICAgICAgICAgfSksXHJcbi8vICAgICAgICAgaGVhZGVyczoge1xyXG4vLyAgICAgICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuLy8gICAgICAgICB9LFxyXG4vLyAgICAgfSkudGhlbigocmVzcG9uc2UpID0+IHtcclxuLy8gICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDApIHtcclxuLy8gICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi0J7RiNC40LHQutCwINC/0YDQuCDRgNC10LPQuNGB0YLRgNCw0YbQuNC4LlwiKTtcclxuLy8gICAgICAgICB9O1xyXG4vLyAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbi8vICAgICB9KTtcclxuLy8gfTtcclxuXHJcbi8vIHR5cGUgZ2V0VG9rZW5Qcm9wcyA9IHtcclxuLy8gICAgIGVtYWlsOiBzdHJpbmc7XHJcbi8vICAgICBwYXNzd29yZDogc3RyaW5nO1xyXG4vLyB9O1xyXG5cclxuLy8gZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFRva2VuKHsgZW1haWwsIHBhc3N3b3JkIH06IGdldFRva2VuUHJvcHMpIHtcclxuLy8gICAgIHJldHVybiBmZXRjaChBUElfVVJMX1VTRVIgKyBUT0tFTiwge1xyXG4vLyAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbi8vICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4vLyAgICAgICAgICAgICBlbWFpbCxcclxuLy8gICAgICAgICAgICAgcGFzc3dvcmQsXHJcbi8vICAgICAgICAgfSksXHJcbi8vICAgICAgICAgaGVhZGVyczoge1xyXG4vLyAgICAgICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuLy8gICAgICAgICB9LFxyXG4vLyAgICAgfSkudGhlbigocmVzcG9uc2UpID0+IHtcclxuLy8gICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDApIHtcclxuLy8gICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi0J3QtdCy0LXRgNC90YvQuSDQsNC00YDQtdGBINGN0LvQtdC60YLRgNC+0L3QvdC+0Lkg0L/QvtGH0YLRiyDQuNC70Lgg0L/QsNGA0L7Qu9GMLlwiKTtcclxuLy8gICAgICAgICB9O1xyXG4vLyAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xyXG4vLyAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLQn9C+0LvRjNC30L7QstCw0YLQtdC70Ywg0L3QtSDQvdCw0LnQtNC10L0uXCIpO1xyXG4vLyAgICAgICAgIH07XHJcbi8vICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNTAwKSB7XHJcbi8vICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcItCe0YjQuNCx0LrQsCDQvdCwINGB0LXRgNCy0LXRgNC1LlwiKTtcclxuLy8gICAgICAgICB9O1xyXG4vLyAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbi8vICAgICB9KTtcclxuLy8gfTtcclxuXHJcbi8vIGV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWZyZXNoVG9rZW4ocmVmcmVzaDogc3RyaW5nKSB7XHJcbi8vICAgICByZXR1cm4gZmV0Y2goQVBJX1VSTF9VU0VSICsgVE9LRU4sIHtcclxuLy8gICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4vLyAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuLy8gICAgICAgICAgICAgcmVmcmVzaDogcmVmcmVzaCxcclxuLy8gICAgICAgICB9KSxcclxuLy8gICAgICAgICBoZWFkZXJzOiB7XHJcbi8vICAgICAgICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4vLyAgICAgICAgIH0sXHJcbi8vICAgICB9KS50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4vLyAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMCkge1xyXG4vLyAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLQntGI0LjQsdC60LAuXCIpO1xyXG4vLyAgICAgICAgIH07XHJcbi8vICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XHJcbi8vICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcItCe0YjQuNCx0LrQsCDQv9GA0Lgg0L/QvtC70YPRh9C10L3QuNC4INGC0L7QutC10L3QsC5cIik7XHJcbi8vICAgICAgICAgfTtcclxuLy8gICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA1MDApIHtcclxuLy8gICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi0J7RiNC40LHQutCwINC90LAg0YHQtdGA0LLQtdGA0LUuXCIpO1xyXG4vLyAgICAgICAgIH07XHJcbi8vICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxuLy8gICAgIH0pO1xyXG4vLyB9O1xyXG5cclxuLy8gZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZFRyYWNrVG9QbGF5bGlzdCh0cmFja0lkOiBudW1iZXIpIHtcclxuLy8gICAgIHJldHVybiBmZXRjaChBUElfVVJMICsgVFJBQ0sgKyBgJHt0cmFja0lkfS9gICsgRkFWT1JJVEUsIHtcclxuLy8gICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4vLyAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuLy8gICAgICAgICAgICAgdHJhY2tJZCxcclxuLy8gICAgICAgICB9KSxcclxuLy8gICAgICAgICBoZWFkZXJzOiB7XHJcbi8vICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHtsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInVzZXJUb2tlblwiKX1gLFxyXG4vLyAgICAgICAgIH0sXHJcbi8vICAgICB9KS50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4vLyAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMCkge1xyXG4vLyAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLQntGI0LjQsdC60LAg0LTQvtCx0LDQstC70LXQvdC40Y8g0YLRgNC10LrQsC5cIik7XHJcbi8vICAgICAgICAgfTtcclxuLy8gICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcclxuLy8gICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi0J7RiNC40LHQutCwINC/0YDQuCDQv9C+0LvRg9GH0LXQvdC40Lgg0YLQvtC60LXQvdCwLlwiKTtcclxuLy8gICAgICAgICB9O1xyXG4vLyAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbi8vICAgICB9KTtcclxuLy8gfTtcclxuXHJcbi8vIGV4cG9ydCBhc3luYyBmdW5jdGlvbiByZW1vdmVUcmFja0Zyb21QbGF5bGlzdCh0cmFja0lkOiBudW1iZXIpIHtcclxuLy8gICAgIHJldHVybiBmZXRjaChBUElfVVJMICsgVFJBQ0sgKyBgJHt0cmFja0lkfS9gICsgRkFWT1JJVEUsIHtcclxuLy8gICAgICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXHJcbi8vICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4vLyAgICAgICAgICAgICBpZDogdHJhY2tJZCxcclxuLy8gICAgICAgICB9KSxcclxuLy8gICAgICAgICBoZWFkZXJzOiB7XHJcbi8vICAgICAgICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4vLyAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7bG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ1c2VyVG9rZW5cIil9YCxcclxuLy8gICAgICAgICB9LFxyXG4vLyAgICAgfSkudGhlbigocmVzcG9uc2UpID0+IHtcclxuLy8gICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDApIHtcclxuLy8gICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi0J7RiNC40LHQutCwINGD0LTQsNC70LXQvdC40Y8g0YLRgNC10LrQsC5cIik7XHJcbi8vICAgICAgICAgfTtcclxuLy8gICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcclxuLy8gICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi0J7RiNC40LHQutCwINC/0YDQuCDQv9C+0LvRg9GH0LXQvdC40Lgg0YLQvtC60LXQvdCwLlwiKTtcclxuLy8gICAgICAgICB9O1xyXG4vLyAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbi8vICAgICB9KTtcclxuLy8gfTtcclxuIl0sIm5hbWVzIjpbIkFQSV9VUkwiLCJUUkFDSyIsIkFMTCIsIkZBVk9SSVRFIiwiU0VMRUNUSU9OIiwiQVBJX1VSTF9VU0VSIiwiTE9HSU4iLCJTSUdOVVAiLCJUT0tFTiIsIlRPS0VOX1JFRlJFU0giLCJnZXRUcmFja3MiLCJwbGF5bGlzdElEIiwicmVzcG9uc2UiLCJmZXRjaCIsIm9rIiwic3RhdHVzIiwiRXJyb3IiLCJkYXRhIiwianNvbiIsImVycm9yIiwiY29uc29sZSIsIndhcm4iLCJnZXRMaWtlZFRyYWNrcyIsInVzZXJUb2tlbiIsIm1ldGhvZCIsImhlYWRlcnMiLCJBdXRob3JpemF0aW9uIiwidGhlbiIsImxvZ2luIiwiZW1haWwiLCJwYXNzd29yZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwicmVnaXN0ZXIiLCJ1c2VybmFtZSIsImdldFRva2VuIiwicmVmcmVzaFRva2VuIiwicmVmcmVzaCIsImFkZFRyYWNrVG9QbGF5bGlzdCIsInRyYWNrSWQiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwicmVtb3ZlVHJhY2tGcm9tUGxheWxpc3QiLCJpZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/api/api.tsx\n"));

/***/ })

});