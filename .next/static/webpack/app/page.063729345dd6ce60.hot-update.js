/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/FilterBlock/FilterBlock.tsx":
/*!****************************************************!*\
  !*** ./src/components/FilterBlock/FilterBlock.tsx ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/* __next_internal_client_entry_do_not_use__  auto */  // import classNames from \"classnames\";\n // import styles from \"./FilterBlock.module.css\";\n // import React, { useMemo, useState } from 'react';\n // import { trackType } from '@/types/types';\n // import { clearActiveFilters, setActiveFilter } from '@/store/features/tracksSlice';\n // import { getUniqueValues } from \"@/lib/getUniqueValues\";\n // import { useAppDispatch, useAppSelector } from \"@/types/hooks\";\n // import { FilterBlockItem } from \"../FilterBlockItem\";\n // const FilterBlock = () => {\n //   const dispatcher = useAppDispatch();\n //   const playList = useAppSelector((state) => state.tracks.playList);\n //   const selectedAuthors = useAppSelector((state) => state.tracks.activeFilters.authors);\n //   const selectedGenres = useAppSelector((state) => state.tracks.activeFilters.genres);\n //   const [localActiveFilter, setLocalActiveFilter] = useState<keyof trackType | null>(null);\n //   const sortByYearValues = [\"По умолчанию\", \"сначала новые\", \"сначала старые\"];\n //   const toggleReleaseYearFilter = (option: string) => {\n //     dispatcher(setActiveFilter({\n //       release_dates: option\n //     }));\n //   };\n //   const toggleSelectedAuthors = (author: string) => {\n //     dispatcher(setActiveFilter({\n //       authors: selectedAuthors.includes(author) ? selectedAuthors.filter((item) => item !== author) : [...selectedAuthors, author],\n //     }))\n //   };\n //   const toggleSelectedGenres = (genre: string) => {\n //     dispatcher(setActiveFilter({\n //       genres: selectedGenres.includes(genre) ? selectedGenres.filter((item) => item !== genre) : [...selectedGenres, genre],\n //     }))\n //   };\n //   const discardFilters = () => {\n //     dispatcher(clearActiveFilters())\n //   }\n //   const memoizedGetUniqueValues = useMemo(() => {\n //     if (localActiveFilter) {\n //       return getUniqueValues(playList, localActiveFilter);\n //     }\n //     return [];\n //   }, [localActiveFilter, playList]);\n //   return (\n //     <div className={classNames(styles.centerBlockFilter, styles.filter)}>\n //       <div className={styles.filterTitle}>Искать по:</div>\n //       <FilterBlockItem\n //         onClick={() => setLocalActiveFilter(localActiveFilter === 'author' ? null : 'author')}\n //         isOpened={localActiveFilter === 'author'}\n //         list={memoizedGetUniqueValues}\n //         toggleSelectedOption={toggleSelectedAuthors}\n //       >\n //         исполнителю\n //       </FilterBlockItem>\n //       <FilterBlockItem\n //         onClick={() => setLocalActiveFilter(localActiveFilter === 'release_date' ? null : 'release_date')}\n //         isOpened={localActiveFilter === 'release_date'}\n //         list={sortByYearValues}\n //         toggleSelectedOption={toggleReleaseYearFilter}\n //       >\n //         году выпуска\n //       </FilterBlockItem>\n //       <FilterBlockItem\n //         onClick={() => setLocalActiveFilter(localActiveFilter === 'genre' ? null : 'genre')}\n //         isOpened={localActiveFilter === 'genre'}\n //         list={memoizedGetUniqueValues}\n //         toggleSelectedOption={toggleSelectedGenres}\n //       >\n //         жанру\n //       </FilterBlockItem>\n //       <button\n //         className={styles.discardButton}\n //         onClick={() => discardFilters()}>\n //         сбросить фильтры\n //       </button>\n //     </div>\n //   );\n // };\n // export default FilterBlock;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL0ZpbHRlckJsb2NrL0ZpbHRlckJsb2NrLnRzeCIsIm1hcHBpbmdzIjoic0RBQUEsQ0FFQSx1Q0FBdUM7Q0FDdkMsaURBQWlEO0NBQ2pELG9EQUFvRDtDQUNwRCw2Q0FBNkM7Q0FDN0Msc0ZBQXNGO0NBQ3RGLDJEQUEyRDtDQUMzRCxrRUFBa0U7Q0FDbEUsd0RBQXdEO0NBR3hELDhCQUE4QjtDQUM5Qix5Q0FBeUM7Q0FDekMsdUVBQXVFO0NBQ3ZFLDJGQUEyRjtDQUMzRix5RkFBeUY7Q0FDekYsOEZBQThGO0NBQzlGLGtGQUFrRjtDQUdsRiwwREFBMEQ7Q0FDMUQsbUNBQW1DO0NBQ25DLDhCQUE4QjtDQUM5QixXQUFXO0NBQ1gsT0FBTztDQUVQLHdEQUF3RDtDQUN4RCxtQ0FBbUM7Q0FDbkMsc0lBQXNJO0NBQ3RJLFVBQVU7Q0FDVixPQUFPO0NBRVAsc0RBQXNEO0NBQ3RELG1DQUFtQztDQUNuQywrSEFBK0g7Q0FDL0gsVUFBVTtDQUNWLE9BQU87Q0FFUCxtQ0FBbUM7Q0FDbkMsdUNBQXVDO0NBQ3ZDLE1BQU07Q0FFTixvREFBb0Q7Q0FDcEQsK0JBQStCO0NBQy9CLDZEQUE2RDtDQUM3RCxRQUFRO0NBQ1IsaUJBQWlCO0NBQ2pCLHVDQUF1QztDQUV2QyxhQUFhO0NBQ2IsNEVBQTRFO0NBQzVFLDZEQUE2RDtDQUU3RCx5QkFBeUI7Q0FDekIsaUdBQWlHO0NBQ2pHLG9EQUFvRDtDQUNwRCx5Q0FBeUM7Q0FDekMsdURBQXVEO0NBQ3ZELFVBQVU7Q0FDVixzQkFBc0I7Q0FDdEIsMkJBQTJCO0NBRTNCLHlCQUF5QjtDQUN6Qiw2R0FBNkc7Q0FDN0csMERBQTBEO0NBQzFELGtDQUFrQztDQUNsQyx5REFBeUQ7Q0FDekQsVUFBVTtDQUNWLHVCQUF1QjtDQUN2QiwyQkFBMkI7Q0FFM0IseUJBQXlCO0NBQ3pCLCtGQUErRjtDQUMvRixtREFBbUQ7Q0FDbkQseUNBQXlDO0NBQ3pDLHNEQUFzRDtDQUN0RCxVQUFVO0NBQ1YsZ0JBQWdCO0NBQ2hCLDJCQUEyQjtDQUUzQixnQkFBZ0I7Q0FDaEIsMkNBQTJDO0NBQzNDLDRDQUE0QztDQUM1QywyQkFBMkI7Q0FDM0Isa0JBQWtCO0NBRWxCLGFBQWE7Q0FDYixPQUFPO0NBQ1AsS0FBSztDQUVMLDhCQUE4QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy9GaWx0ZXJCbG9jay9GaWx0ZXJCbG9jay50c3g/YjU2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIlxyXG5cclxuLy8gaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSBcImNsYXNzbmFtZXNcIjtcclxuLy8gaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi9GaWx0ZXJCbG9jay5tb2R1bGUuY3NzXCI7XHJcbi8vIGltcG9ydCBSZWFjdCwgeyB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcclxuLy8gaW1wb3J0IHsgdHJhY2tUeXBlIH0gZnJvbSAnQC90eXBlcy90eXBlcyc7XHJcbi8vIGltcG9ydCB7IGNsZWFyQWN0aXZlRmlsdGVycywgc2V0QWN0aXZlRmlsdGVyIH0gZnJvbSAnQC9zdG9yZS9mZWF0dXJlcy90cmFja3NTbGljZSc7XHJcbi8vIGltcG9ydCB7IGdldFVuaXF1ZVZhbHVlcyB9IGZyb20gXCJAL2xpYi9nZXRVbmlxdWVWYWx1ZXNcIjtcclxuLy8gaW1wb3J0IHsgdXNlQXBwRGlzcGF0Y2gsIHVzZUFwcFNlbGVjdG9yIH0gZnJvbSBcIkAvdHlwZXMvaG9va3NcIjtcclxuLy8gaW1wb3J0IHsgRmlsdGVyQmxvY2tJdGVtIH0gZnJvbSBcIi4uL0ZpbHRlckJsb2NrSXRlbVwiO1xyXG5cclxuXHJcbi8vIGNvbnN0IEZpbHRlckJsb2NrID0gKCkgPT4ge1xyXG4vLyAgIGNvbnN0IGRpc3BhdGNoZXIgPSB1c2VBcHBEaXNwYXRjaCgpO1xyXG4vLyAgIGNvbnN0IHBsYXlMaXN0ID0gdXNlQXBwU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS50cmFja3MucGxheUxpc3QpO1xyXG4vLyAgIGNvbnN0IHNlbGVjdGVkQXV0aG9ycyA9IHVzZUFwcFNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUudHJhY2tzLmFjdGl2ZUZpbHRlcnMuYXV0aG9ycyk7XHJcbi8vICAgY29uc3Qgc2VsZWN0ZWRHZW5yZXMgPSB1c2VBcHBTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLnRyYWNrcy5hY3RpdmVGaWx0ZXJzLmdlbnJlcyk7XHJcbi8vICAgY29uc3QgW2xvY2FsQWN0aXZlRmlsdGVyLCBzZXRMb2NhbEFjdGl2ZUZpbHRlcl0gPSB1c2VTdGF0ZTxrZXlvZiB0cmFja1R5cGUgfCBudWxsPihudWxsKTtcclxuLy8gICBjb25zdCBzb3J0QnlZZWFyVmFsdWVzID0gW1wi0J/QviDRg9C80L7Qu9GH0LDQvdC40Y5cIiwgXCLRgdC90LDRh9Cw0LvQsCDQvdC+0LLRi9C1XCIsIFwi0YHQvdCw0YfQsNC70LAg0YHRgtCw0YDRi9C1XCJdO1xyXG5cclxuXHJcbi8vICAgY29uc3QgdG9nZ2xlUmVsZWFzZVllYXJGaWx0ZXIgPSAob3B0aW9uOiBzdHJpbmcpID0+IHtcclxuLy8gICAgIGRpc3BhdGNoZXIoc2V0QWN0aXZlRmlsdGVyKHtcclxuLy8gICAgICAgcmVsZWFzZV9kYXRlczogb3B0aW9uXHJcbi8vICAgICB9KSk7XHJcbi8vICAgfTtcclxuXHJcbi8vICAgY29uc3QgdG9nZ2xlU2VsZWN0ZWRBdXRob3JzID0gKGF1dGhvcjogc3RyaW5nKSA9PiB7XHJcbi8vICAgICBkaXNwYXRjaGVyKHNldEFjdGl2ZUZpbHRlcih7XHJcbi8vICAgICAgIGF1dGhvcnM6IHNlbGVjdGVkQXV0aG9ycy5pbmNsdWRlcyhhdXRob3IpID8gc2VsZWN0ZWRBdXRob3JzLmZpbHRlcigoaXRlbSkgPT4gaXRlbSAhPT0gYXV0aG9yKSA6IFsuLi5zZWxlY3RlZEF1dGhvcnMsIGF1dGhvcl0sXHJcbi8vICAgICB9KSlcclxuLy8gICB9O1xyXG5cclxuLy8gICBjb25zdCB0b2dnbGVTZWxlY3RlZEdlbnJlcyA9IChnZW5yZTogc3RyaW5nKSA9PiB7XHJcbi8vICAgICBkaXNwYXRjaGVyKHNldEFjdGl2ZUZpbHRlcih7XHJcbi8vICAgICAgIGdlbnJlczogc2VsZWN0ZWRHZW5yZXMuaW5jbHVkZXMoZ2VucmUpID8gc2VsZWN0ZWRHZW5yZXMuZmlsdGVyKChpdGVtKSA9PiBpdGVtICE9PSBnZW5yZSkgOiBbLi4uc2VsZWN0ZWRHZW5yZXMsIGdlbnJlXSxcclxuLy8gICAgIH0pKVxyXG4vLyAgIH07XHJcblxyXG4vLyAgIGNvbnN0IGRpc2NhcmRGaWx0ZXJzID0gKCkgPT4ge1xyXG4vLyAgICAgZGlzcGF0Y2hlcihjbGVhckFjdGl2ZUZpbHRlcnMoKSlcclxuLy8gICB9XHJcblxyXG4vLyAgIGNvbnN0IG1lbW9pemVkR2V0VW5pcXVlVmFsdWVzID0gdXNlTWVtbygoKSA9PiB7XHJcbi8vICAgICBpZiAobG9jYWxBY3RpdmVGaWx0ZXIpIHtcclxuLy8gICAgICAgcmV0dXJuIGdldFVuaXF1ZVZhbHVlcyhwbGF5TGlzdCwgbG9jYWxBY3RpdmVGaWx0ZXIpO1xyXG4vLyAgICAgfVxyXG4vLyAgICAgcmV0dXJuIFtdO1xyXG4vLyAgIH0sIFtsb2NhbEFjdGl2ZUZpbHRlciwgcGxheUxpc3RdKTtcclxuXHJcbi8vICAgcmV0dXJuIChcclxuLy8gICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWVzKHN0eWxlcy5jZW50ZXJCbG9ja0ZpbHRlciwgc3R5bGVzLmZpbHRlcil9PlxyXG4vLyAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmZpbHRlclRpdGxlfT7QmNGB0LrQsNGC0Ywg0L/Qvjo8L2Rpdj5cclxuXHJcbi8vICAgICAgIDxGaWx0ZXJCbG9ja0l0ZW1cclxuLy8gICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRMb2NhbEFjdGl2ZUZpbHRlcihsb2NhbEFjdGl2ZUZpbHRlciA9PT0gJ2F1dGhvcicgPyBudWxsIDogJ2F1dGhvcicpfVxyXG4vLyAgICAgICAgIGlzT3BlbmVkPXtsb2NhbEFjdGl2ZUZpbHRlciA9PT0gJ2F1dGhvcid9XHJcbi8vICAgICAgICAgbGlzdD17bWVtb2l6ZWRHZXRVbmlxdWVWYWx1ZXN9XHJcbi8vICAgICAgICAgdG9nZ2xlU2VsZWN0ZWRPcHRpb249e3RvZ2dsZVNlbGVjdGVkQXV0aG9yc31cclxuLy8gICAgICAgPlxyXG4vLyAgICAgICAgINC40YHQv9C+0LvQvdC40YLQtdC70Y5cclxuLy8gICAgICAgPC9GaWx0ZXJCbG9ja0l0ZW0+XHJcblxyXG4vLyAgICAgICA8RmlsdGVyQmxvY2tJdGVtXHJcbi8vICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0TG9jYWxBY3RpdmVGaWx0ZXIobG9jYWxBY3RpdmVGaWx0ZXIgPT09ICdyZWxlYXNlX2RhdGUnID8gbnVsbCA6ICdyZWxlYXNlX2RhdGUnKX1cclxuLy8gICAgICAgICBpc09wZW5lZD17bG9jYWxBY3RpdmVGaWx0ZXIgPT09ICdyZWxlYXNlX2RhdGUnfVxyXG4vLyAgICAgICAgIGxpc3Q9e3NvcnRCeVllYXJWYWx1ZXN9XHJcbi8vICAgICAgICAgdG9nZ2xlU2VsZWN0ZWRPcHRpb249e3RvZ2dsZVJlbGVhc2VZZWFyRmlsdGVyfVxyXG4vLyAgICAgICA+XHJcbi8vICAgICAgICAg0LPQvtC00YMg0LLRi9C/0YPRgdC60LBcclxuLy8gICAgICAgPC9GaWx0ZXJCbG9ja0l0ZW0+XHJcblxyXG4vLyAgICAgICA8RmlsdGVyQmxvY2tJdGVtXHJcbi8vICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0TG9jYWxBY3RpdmVGaWx0ZXIobG9jYWxBY3RpdmVGaWx0ZXIgPT09ICdnZW5yZScgPyBudWxsIDogJ2dlbnJlJyl9XHJcbi8vICAgICAgICAgaXNPcGVuZWQ9e2xvY2FsQWN0aXZlRmlsdGVyID09PSAnZ2VucmUnfVxyXG4vLyAgICAgICAgIGxpc3Q9e21lbW9pemVkR2V0VW5pcXVlVmFsdWVzfVxyXG4vLyAgICAgICAgIHRvZ2dsZVNlbGVjdGVkT3B0aW9uPXt0b2dnbGVTZWxlY3RlZEdlbnJlc31cclxuLy8gICAgICAgPlxyXG4vLyAgICAgICAgINC20LDQvdGA0YNcclxuLy8gICAgICAgPC9GaWx0ZXJCbG9ja0l0ZW0+XHJcblxyXG4vLyAgICAgICA8YnV0dG9uXHJcbi8vICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuZGlzY2FyZEJ1dHRvbn1cclxuLy8gICAgICAgICBvbkNsaWNrPXsoKSA9PiBkaXNjYXJkRmlsdGVycygpfT5cclxuLy8gICAgICAgICDRgdCx0YDQvtGB0LjRgtGMINGE0LjQu9GM0YLRgNGLXHJcbi8vICAgICAgIDwvYnV0dG9uPlxyXG5cclxuLy8gICAgIDwvZGl2PlxyXG4vLyAgICk7XHJcbi8vIH07XHJcblxyXG4vLyBleHBvcnQgZGVmYXVsdCBGaWx0ZXJCbG9jazsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/FilterBlock/FilterBlock.tsx\n"));

/***/ })

});