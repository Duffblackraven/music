/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_src_components_ContentPlaylist_ContentPlaylist_tsx",{

/***/ "(app-pages-browser)/./src/components/ContentPlaylist/ContentPlaylist.tsx":
/*!************************************************************!*\
  !*** ./src/components/ContentPlaylist/ContentPlaylist.tsx ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// \"use client\"\n// import styles from \"./ContentPlaylist.module.css\";\n// import classNames from \"classnames\";\n// import React, { useEffect, useMemo, useRef, useState } from 'react';\n// import { trackType } from '@/types/types';\n// import { setCurrentTrack, setPlayList } from '@/store/features/tracksSlice';\n// import { PlayListItem } from '@components/PlayListItem';\n// import { sortTracksByReleaseDate } from \"@/lib/sortTracksByReleaseDate\";\n// import { setAuthUserToken } from \"@/store/features/authSlice\";\n// import { useAppDispatch, useAppSelector } from \"@/types/hooks\";\n// import { getLikedTracks, getTracks, refreshToken } from \"@/api/api\";\n// const ContentPlaylist = () => {\n//   const dispatcher = useAppDispatch();\n//   const playList = useAppSelector((state) => state.tracks.playList);\n//   const searchPlayList = useAppSelector((state) => state.tracks.searchPlaylist);\n//   const { track } = useAppSelector((state) => state.tracks);\n//   const userToken = localStorage.getItem('userToken');\n//   const isSearch = useAppSelector((state) => state.tracks.isSearch);\n//   const activeFilters = useAppSelector((state) => state.tracks.activeFilters);\n//   const [tokenRefreshInterval, setTokenRefreshInterval] = useState<NodeJS.Timeout | null>(null);\n//   const handleRefreshToken = async () => {\n//     try {\n//       const token = localStorage.getItem('refreshToken');\n//       if (!token) return;\n//       const refreshedToken = await refreshToken(token);\n//       dispatcher(setAuthUserToken(refreshedToken.access));\n//     } catch (error) {\n//       console.error('Error refreshing token:', error);\n//     }\n//   };\n//   useEffect(() => {\n//     const interval = setInterval(() => {\n//       handleRefreshToken();\n//     }, 160000);\n//     setTokenRefreshInterval(interval);\n//     return () => {\n//       if (tokenRefreshInterval) clearInterval(tokenRefreshInterval);\n//     };\n//   }, []);\n//   const playlistID = useAppSelector((state) => state.tracks.playlistNumber);\n//   useEffect(() => {\n//     if (userToken !== null) {\n//       if (String(playlistID) === \"liked\") {\n//         getLikedTracks(userToken).then((data) => {\n//           dispatcher(setPlayList(data));\n//         });\n//       } else {\n//         getTracks(playlistID).then((data) => {\n//           data.items ? dispatcher(setPlayList(data.items)) : dispatcher(setPlayList(data));\n//         });\n//       };\n//     };\n//   }, [dispatcher, playlistID]);\n//   const handleTrack = (trackR: trackType) => {\n//     dispatcher(setCurrentTrack(trackR));\n//   };\n//   const [trackDurations, setTrackDurations] = useState<{ [key: string]: number }>({});\n//   const audioRefs = useRef<{ [key: string]: HTMLAudioElement }>({});\n//   useEffect(() => {\n//     const durations: { [key: string]: number } = {};\n//     playList?.forEach((track: trackType) => {\n//       const audio = new Audio(track.track_file);\n//       audio.addEventListener('loadedmetadata', () => {\n//         durations[track.id] = audio.duration;\n//         setTrackDurations({ ...durations });\n//       });\n//       audioRefs.current[track.id] = audio;\n//     });\n//     return () => {\n//       Object.values(audioRefs.current).forEach((audio) => {\n//         audio.pause();\n//         audio.removeAttribute('src');\n//         audio.load();\n//       });\n//     };\n//   }, [playList]);\n//   const tracksToRender = isSearch ? searchPlayList : playList;\n//   const filterTracks = (tracks: trackType[]) => {\n//     return tracks.filter((track) => {\n//       const isAuthorsMatch = activeFilters.authors.length === 0 || activeFilters.authors.includes(track.author);\n//       const isGenresMatch = activeFilters.genres.length === 0 || activeFilters.genres.includes(track.genre);\n//       return isAuthorsMatch && isGenresMatch;\n//     });\n//   };\n//   const filteredAndSortedPlaylist = useMemo(() => {\n//     const filteredTracks = filterTracks(tracksToRender);\n//     if (activeFilters.release_dates) {\n//       return sortTracksByReleaseDate(filteredTracks, activeFilters.release_dates);\n//     } else {\n//       return filteredTracks;\n//     }\n//   }, [tracksToRender, activeFilters]);\n//   return (\n//     <div className={classNames(styles.contentPlaylist, styles.playlist)}>\n//       {isSearch || tracksToRender.length === 0 ? (\n//         <p className={styles.playlistTitleCol}>No tracks found</p>\n//       ) : (\n//         filteredAndSortedPlaylist.map((trackR: trackType) => (\n//           <PlayListItem\n//             key={trackR.id}\n//             id={trackR.id}\n//             name={trackR.name}\n//             author={trackR.author}\n//             album={trackR.album}\n//             duration={trackDurations[trackR.id]}\n//             setTrack={() => handleTrack(trackR)}\n//             isSetTrack={trackR.id === track?.id}\n//             stared_user={trackR.stared_user}\n//           />\n//         ))\n//       )}\n//     </div>\n//   );\n// };\n// export default ContentPlaylist;\n// \"use client\"\n// import styles from \"./ContentPlaylist.module.css\";\n// import classNames from \"classnames\";\n// import React, { useEffect, useMemo, useRef, useState } from 'react';\n// import { trackType } from '@/types/types';\n// import { setCurrentTrack, setPlayList } from '@/store/features/tracksSlice';\n// import { useAppDispatch, useAppSelector } from \"@/types/hooks\";\n// import { getLikedTracks, getTracks } from \"@/api/api\";\n// import { sortTracksByReleaseDate } from \"@/lib/sortTracksByReleaseDate\";\n// import { PlayListItem } from \"../PlayListItem\";\n// const ContentPlaylist = () => {\n//   const dispatcher = useAppDispatch();\n//   const playList = useAppSelector((state) => state.tracks.playList);\n//   const searchPlayList = useAppSelector((state) => state.tracks.searchPlaylist);\n//   const { track } = useAppSelector((state) => state.tracks);\n//   const userToken = localStorage.getItem('userToken');\n//   const isSearch = useAppSelector((state) => state.tracks.isSearch);\n//   const activeFilters = useAppSelector((state) => state.tracks.activeFilters);\n//   const playlistNumber = useAppSelector((state) => state.tracks.playlistNumber);\n//   // useEffect(() => {\n//   //   if (playlistNumber === \"liked\") {\n//   //     getLikedTracks(userToken).then((data) => {\n//   //       dispatcher(setPlayList(data));\n//   //     });\n//   //   } else {\n//   //     getTracks(playlistNumber).then((data) => {\n//   //       data.items ? dispatcher(setPlayList(data.items)) : dispatcher(setPlayList(data));\n//   //     });\n//   //   }\n//   // }, [dispatcher, playlistNumber]);\n//   useEffect(() => {\n//     getTracks(playlistNumber).then((data) => {\n//       data.items ? dispatcher(setPlayList(data.items)) : dispatcher(setPlayList(data));\n//     });\n//   }, [dispatcher, playlistNumber]);\n//   const handleTrack = (trackR: trackType) => {\n//     dispatcher(setCurrentTrack(trackR));\n//   };\n//   const [trackDurations, setTrackDurations] = useState<{ [key: string]: number }>({});\n//   const audioRefs = useRef<{ [key: string]: HTMLAudioElement }>({});\n//   useEffect(() => {\n//     const durations: { [key: string]: number } = {};\n//     playList?.forEach((track: trackType) => {\n//       const audio = new Audio(track.track_file);\n//       audio.addEventListener('loadedmetadata', () => {\n//         durations[track.id] = audio.duration;\n//         setTrackDurations({ ...durations });\n//       });\n//       audioRefs.current[track.id] = audio;\n//     });\n//     return () => {\n//       Object.values(audioRefs.current).forEach((audio) => {\n//         audio.pause();\n//         audio.removeAttribute('src');\n//         audio.load();\n//       });\n//     };\n//   }, [playList]);\n//   const tracksToRender = isSearch ? searchPlayList : playList;\n//   const filterTracks = (tracks: trackType[]) => {\n//     return tracks.filter((track) => {\n//       const isAuthorsMatch = activeFilters.authors.length === 0 || activeFilters.authors.includes(track.author);\n//       const isGenresMatch = activeFilters.genres.length === 0 || activeFilters.genres.includes(track.genre);\n//       return isAuthorsMatch && isGenresMatch;\n//     });\n//   };\n//   const filteredAndSortedPlaylist = useMemo(() => {\n//     const filteredTracks = filterTracks(tracksToRender);\n//     if (activeFilters.release_dates) {\n//       return sortTracksByReleaseDate(filteredTracks, activeFilters.release_dates);\n//     } else {\n//       return filteredTracks;\n//     }\n//   }, [tracksToRender, activeFilters]);\n//   return (\n//     <div className={classNames(styles.contentPlaylist, styles.playlist)}>\n//       {isSearch && tracksToRender.length === 0 ? (\n//         <p className={styles.playlistTitleCol}>No tracks found</p>\n//       ) : (\n//         filteredAndSortedPlaylist.map((trackR: trackType) => (\n//           <PlayListItem\n//             key={trackR.id}\n//             name={trackR.name}\n//             author={trackR.author}\n//             album={trackR.album}\n//             duration={trackDurations[trackR.id]}\n//             setTrack={() => handleTrack(trackR)}\n//             isSetTrack={trackR.id === track?.id}\n//             stared_user={trackR.stared_user}\n//           />\n//         ))\n//       )}\n//     </div>\n//   );\n// };\n// export default ContentPlaylist;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/ContentPlaylist/ContentPlaylist.tsx\n"));

/***/ })

});