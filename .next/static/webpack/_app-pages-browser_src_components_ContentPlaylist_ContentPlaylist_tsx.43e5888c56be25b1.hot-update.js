"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_src_components_ContentPlaylist_ContentPlaylist_tsx",{

/***/ "(app-pages-browser)/./src/api/api.tsx":
/*!*************************!*\
  !*** ./src/api/api.tsx ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addTrackToPlaylist: function() { return /* binding */ addTrackToPlaylist; },\n/* harmony export */   getLikedTracks: function() { return /* binding */ getLikedTracks; },\n/* harmony export */   getToken: function() { return /* binding */ getToken; },\n/* harmony export */   getTracks: function() { return /* binding */ getTracks; },\n/* harmony export */   login: function() { return /* binding */ login; },\n/* harmony export */   refreshToken: function() { return /* binding */ refreshToken; },\n/* harmony export */   register: function() { return /* binding */ register; },\n/* harmony export */   removeTrackFromPlaylist: function() { return /* binding */ removeTrackFromPlaylist; }\n/* harmony export */ });\nconst API_URL = \"https://skypro-music-api.skyeng.tech/catalog/\";\nconst TRACK = \"track/\";\nconst ALL = \"all/\";\nconst FAVORITE = \"favorite/\";\nconst SELECTION = \"selection/\";\nconst API_URL_USER = \"https://skypro-music-api.skyeng.tech/user/\";\nconst LOGIN = \"login/\";\nconst SIGNUP = \"signup/\";\nconst TOKEN = \"token/\";\nconst TOKEN_REFRESH = \"token/refresh/\";\nasync function getTracks(playlistID) {\n    try {\n        const response = await fetch(API_URL + (playlistID ? SELECTION + playlistID : TRACK + ALL));\n        if (!response.ok) {\n            if (response.status === 401) {\n                throw new Error(\"No authorization\");\n            } else {\n                throw new Error(\"HTTP error! Status: \".concat(response.status));\n            }\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.warn(error);\n        throw error;\n    }\n}\nasync function getLikedTracks(userToken) {\n    return fetch(API_URL + TRACK + FAVORITE + ALL, {\n        method: \"GET\",\n        headers: {\n            Authorization: \"Bearer \".concat(userToken)\n        }\n    }).then((response)=>{\n        if (response.status === 400) {\n            throw new Error(\"Incorrect email or password.\");\n        }\n        if (response.status === 401) {\n            throw new Error(\"Пользователь не найден\");\n        }\n        if (response.status === 500) {\n            throw new Error(\"Ошибка на сервере.\");\n        }\n        return response.json();\n    });\n}\nasync function login(param) {\n    let { email, password } = param;\n    return fetch(API_URL_USER + LOGIN, {\n        method: \"POST\",\n        body: JSON.stringify({\n            email,\n            password\n        }),\n        headers: {\n            \"content-type\": \"application/json\"\n        }\n    }).then((response)=>{\n        if (response.status === 400) {\n            throw new Error(\"Incorrect email or password.\");\n        }\n        if (response.status === 401) {\n            throw new Error(\"Пользователь не найден\");\n        }\n        if (response.status === 500) {\n            throw new Error(\"Ошибка на сервере.\");\n        }\n        return response.json();\n    });\n}\nasync function register(param) {\n    let { email, password } = param;\n    return fetch(API_URL_USER + SIGNUP, {\n        method: \"POST\",\n        body: JSON.stringify({\n            email,\n            password\n        }),\n        headers: {\n            \"content-type\": \"application/json\"\n        }\n    }).then((response)=>{\n        if (response.status === 400) {\n            throw new Error(\"Ошибка при регистрации.\");\n        }\n        return response.json();\n    });\n}\nasync function getToken(param) {\n    let { email, password } = param;\n    return fetch(API_URL_USER + TOKEN, {\n        method: \"POST\",\n        body: JSON.stringify({\n            email,\n            password\n        }),\n        headers: {\n            \"content-type\": \"application/json\"\n        }\n    }).then((response)=>{\n        if (response.status === 400) {\n            throw new Error(\"Неверный адрес электронной почты или пароль.\");\n        }\n        if (response.status === 401) {\n            throw new Error(\"Пользователь не найден\");\n        }\n        if (response.status === 500) {\n            throw new Error(\"Ошибка на сервере.\");\n        }\n        return response.json();\n    });\n}\nasync function refreshToken(refresh) {\n    return fetch(API_URL_USER + TOKEN_REFRESH, {\n        method: \"POST\",\n        body: JSON.stringify({\n            refresh: refresh\n        }),\n        headers: {\n            \"content-type\": \"application/json\"\n        }\n    }).then((response)=>{\n        if (response.status === 400) {\n            throw new Error(\"Одна ошибка и ты ошибся\");\n        }\n        if (response.status === 401) {\n            throw new Error(\"Ошибка при получении токена.\");\n        }\n        if (response.status === 500) {\n            throw new Error(\"Ошибка на сервере.\");\n        }\n        return response.json();\n    });\n}\nasync function addTrackToPlaylist(trackId) {\n    return fetch(API_URL + TRACK + \"\".concat(trackId, \"/\") + FAVORITE, {\n        method: \"POST\",\n        body: JSON.stringify({\n            trackId\n        }),\n        headers: {\n            Authorization: \"Bearer \".concat(localStorage.getItem(\"userToken\"))\n        }\n    }).then((response)=>{\n        if (response.status === 400) {\n            throw new Error(\"Ошибка добавления трека.\");\n        }\n        if (response.status === 401) {\n            throw new Error(\"Ошибка при получении токена.\");\n        }\n        return response.json();\n    });\n}\nasync function removeTrackFromPlaylist(trackId) {\n    return fetch(API_URL + TRACK + \"\".concat(trackId, \"/\") + FAVORITE, {\n        method: \"DELETE\",\n        body: JSON.stringify({\n            id: trackId\n        }),\n        headers: {\n            \"content-type\": \"application/json\",\n            Authorization: \"Bearer \".concat(localStorage.getItem(\"userToken\"))\n        }\n    }).then((response)=>{\n        if (response.status === 400) {\n            throw new Error(\"Ошибка удаления трека.\");\n        }\n        if (response.status === 401) {\n            throw new Error(\"Ошибка при получении токена.\");\n        }\n        return response.json();\n    });\n}\n // const API_URL = \"https://skypro-music-api.skyeng.tech/catalog/\";\n // const TRACK = \"track/\";\n // const ALL = \"all/\";\n // const FAVORITE = \"favorite/\";\n // const SELECTION = \"selection/\";\n // const API_URL_USER = \"https://skypro-music-api.skyeng.tech/user/\";\n // const LOGIN = \"login/\";\n // const SIGNUP = \"signup/\";\n // const TOKEN = \"token/\";\n // const TOKEN_REFRESH = \"token/refresh/\";\n // export async function getTracks(playlistID: number | null) {\n //     try {\n //         const response = await fetch(API_URL + (playlistID ? (SELECTION + playlistID) : (TRACK + ALL)));\n //         if (!response.ok) {\n //             if (response.status === 401) {\n //                 throw new Error(\"Нет авторизации\");\n //             } else {\n //                 throw new Error(`Ошибка! Статус: ${response.status}`);\n //             };\n //         };\n //         const data = await response.json();\n //         return data;\n //     } catch (error) {\n //         console.warn(error);\n //         throw error;\n //     };\n // };\n // export async function getLikedTracks(userToken: string) {\n //     return fetch(API_URL + TRACK + FAVORITE + ALL, {\n //         method: \"GET\",\n //         headers: {\n //             Authorization: `Bearer ${userToken}`,\n //         },\n //     }).then((response) => {\n //         if (response.status === 400) {\n //             throw new Error(\"Неверный адрес электронной почты или пароль.\");\n //         };\n //         if (response.status === 401) {\n //             throw new Error(\"Пользователь не найден.\");\n //         };\n //         if (response.status === 500) {\n //             throw new Error(\"Ошибка на сервере.\");\n //         };\n //         return response.json();\n //     });\n // };\n // type loginProps = {\n //     email: string;\n //     password: string;\n // };\n // export async function login({ email, password }: loginProps) {\n //     return fetch(API_URL_USER + LOGIN, {\n //         method: \"POST\",\n //         body: JSON.stringify({\n //             email,\n //             password,\n //         }),\n //         headers: {\n //             \"content-type\": \"application/json\",\n //         },\n //     }).then((response) => {\n //         if (response.status === 400) {\n //             throw new Error(\"Неверный адрес электронной почты или пароль.\");\n //         };\n //         if (response.status === 401) {\n //             throw new Error(\"Пользователь не найден.\");\n //         };\n //         if (response.status === 500) {\n //             throw new Error(\"Ошибка на сервере.\");\n //         };\n //         return response.json();\n //     });\n // };\n // type registerProps = {\n //     username: string\n //     email: string;\n //     password: string;\n // };\n // export async function register({ username, email, password }: registerProps) {\n //     return fetch(API_URL_USER + SIGNUP, {\n //         method: \"POST\",\n //         body: JSON.stringify({\n //             email,\n //             password,\n //             username,\n //         }),\n //         headers: {\n //             \"content-type\": \"application/json\",\n //         },\n //     }).then((response) => {\n //         if (response.status === 400) {\n //             throw new Error(\"Ошибка при регистрации.\");\n //         };\n //         return response.json();\n //     });\n // };\n // type getTokenProps = {\n //     email: string;\n //     password: string;\n // };\n // export async function getToken({ email, password }: getTokenProps) {\n //     return fetch(API_URL_USER + TOKEN, {\n //         method: \"POST\",\n //         body: JSON.stringify({\n //             email,\n //             password,\n //         }),\n //         headers: {\n //             \"content-type\": \"application/json\",\n //         },\n //     }).then((response) => {\n //         if (response.status === 400) {\n //             throw new Error(\"Неверный адрес электронной почты или пароль.\");\n //         };\n //         if (response.status === 401) {\n //             throw new Error(\"Пользователь не найден.\");\n //         };\n //         if (response.status === 500) {\n //             throw new Error(\"Ошибка на сервере.\");\n //         };\n //         return response.json();\n //     });\n // };\n // export async function refreshToken(refresh: string) {\n //     return fetch(API_URL_USER + TOKEN, {\n //         method: \"POST\",\n //         body: JSON.stringify({\n //             refresh: refresh,\n //         }),\n //         headers: {\n //             \"content-type\": \"application/json\",\n //         },\n //     }).then((response) => {\n //         if (response.status === 400) {\n //             throw new Error(\"Ошибка.\");\n //         };\n //         if (response.status === 401) {\n //             throw new Error(\"Ошибка при получении токена.\");\n //         };\n //         if (response.status === 500) {\n //             throw new Error(\"Ошибка на сервере.\");\n //         };\n //         return response.json();\n //     });\n // };\n // export async function addTrackToPlaylist(trackId: number) {\n //     return fetch(API_URL + TRACK + `${trackId}/` + FAVORITE, {\n //         method: \"POST\",\n //         body: JSON.stringify({\n //             trackId,\n //         }),\n //         headers: {\n //             Authorization: `Bearer ${localStorage.getItem(\"userToken\")}`,\n //         },\n //     }).then((response) => {\n //         if (response.status === 400) {\n //             throw new Error(\"Ошибка добавления трека.\");\n //         };\n //         if (response.status === 401) {\n //             throw new Error(\"Ошибка при получении токена.\");\n //         };\n //         return response.json();\n //     });\n // };\n // export async function removeTrackFromPlaylist(trackId: number) {\n //     return fetch(API_URL + TRACK + `${trackId}/` + FAVORITE, {\n //         method: \"DELETE\",\n //         body: JSON.stringify({\n //             id: trackId,\n //         }),\n //         headers: {\n //             \"content-type\": \"application/json\",\n //             Authorization: `Bearer ${localStorage.getItem(\"userToken\")}`,\n //         },\n //     }).then((response) => {\n //         if (response.status === 400) {\n //             throw new Error(\"Ошибка удаления трека.\");\n //         };\n //         if (response.status === 401) {\n //             throw new Error(\"Ошибка при получении токена.\");\n //         };\n //         return response.json();\n //     });\n // };\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/api/api.tsx\n"));

/***/ })

});